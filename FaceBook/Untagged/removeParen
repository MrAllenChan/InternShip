public String removeParen(String s) {
        if (s.length() == 0) {
            return "";
        }
        char[] paren = new char[]{'(',')'};
        StringBuilder sb = new StringBuilder(s);
        int left = 0;
        int right = 0;
        for (int i = 0; i < sb.length(); i++) {
            char curt = sb.charAt(i);
            if (curt == paren[0]) left++;
            if (curt == paren[1]) left--;
            if (left < 0) {
                sb.delete(i,i+1);
                left++;
                i--;
            }
        }
        for (int i = sb.length() - 1; i >= 0; i--) {
            char curt = sb.charAt(i);
            if (curt == paren[1]) right++;
            if (curt == paren[0]) right--;
            if (right < 0) {
                sb.delete(i,i+1);
                right++;
                i++;
            }
        }
        return sb.toString();
    }



// a stack
public String removeParen(String s) {
    if (s.length() <= 1) {
      return "";
    }
    Deque<Integer> stack = new ArrayDeque<>();
    for (int i = 0; i < s.length(); i++) {
      char curt = s.charAt(i);
      if (curt == '(') {
        stack.push(i);
      }
      else if (curt == ')'){
        if (stack.isEmpty() || s.charAt(stack.peek()) == ')') {
          stack.push(i);
        }
        else {
          stack.pop();
        }
      }
    }
    //因为是从后往前删除，所以序号是不变的
    StringBuilder sb = new StringBuilder(s);
    while (!stack.isEmpty()) {
      sb.deleteCharAt(stack.pop());
    }
    return sb.toString();
  }
