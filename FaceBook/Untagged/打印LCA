// Iterative LCA
public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
        Map<TreeNode, TreeNode> ch2pa = new HashMap<>();
        Queue<TreeNode> level = new LinkedList<>();
        level.offer(root);
        ch2pa.put(root,null);
        while (!level.isEmpty()) {
            TreeNode curt = level.poll();
            if (curt.left != null) {
                ch2pa.put(curt.left,curt);
                level.offer(curt.left);
            }
            if (curt.right != null) {
                ch2pa.put(curt.right,curt);
                level.offer(curt.right);
            }
        }
        Set<TreeNode> path = new HashSet<>();
        while (p != null) {
            path.add(p);
            p = ch2pa.get(p);
        }
        while (q != null) {
            if (path.contains(q)) return q;
            q = ch2pa.get(q);
        }
        return null;
    }
    
// LCA with parent
public ParentTreeNode lowestCommonAncestorII(ParentTreeNode root, ParentTreeNode A, ParentTreeNode B) {
        // write your code here
        if (root == null) return null;
        Set<ParentTreeNode> hs = new HashSet<>();
        while (A != null) {
            hs.add(A);
            A = A.parent;
        }
        while (B != null) {
            if (hs.contains(B)) return B;
            B = B.parent;
        }
        return null;
    }

//LCA with parent O(1)
public ParentTreeNode lowestCommonAncestorII(ParentTreeNode root, ParentTreeNode A, ParentTreeNode B) {
        // write your code here
        if (root == null) return null;
        ParentTreeNode iteA = A, iteB = B;
        while (iteA != iteB) {
            iteA = iteA == root?B:iteA.parent;
            iteB = iteB == root?A:iteB.parent;
        }
        return iteA;
    }
    
// LCA 两个点不一定都在
private class ResultType {
        int count;
        TreeNode node;
        public ResultType(int count, TreeNode node) {
            this.count = count;
            this.node = node;
        }
    }
    public TreeNode lowestCommonAncestor3(TreeNode root, TreeNode A, TreeNode B) {
        // write your code here
        if (root == null) return null;
        return helper(root,A,B).node;
    }
    public ResultType helper(TreeNode root, TreeNode A, TreeNode B) {
        if (root == null) return new ResultType(0,null);
        int nodeCount = 0;
        if (root == A) nodeCount++;
        if (root == B) nodeCount++;
        ResultType left = helper(root.left,A,B);
        ResultType right = helper(root.right,A,B);
        if (left.node != null) return left;
        if (right.node != null) return right;
        nodeCount += left.count + right.count;
        if (nodeCount == 2) return new ResultType(2,root);
        return new ResultType(nodeCount,null);
    }




// 打印LCA路径
private class ResultType {
        TreeNode pq;
        List<String> path;
        public ResultType() {
            path = new ArrayList<String>();
        }
    }
    public TreeNode lowestCommonAncestor(TreeNode root, TreeNode p, TreeNode q) {
       if (root == null) return null;
       ResultType res = helper(root,p,q);
        for (String item : res.path) {
            System.out.println(item);
        }
        return res.pq;
    }
    public ResultType helper(TreeNode root, TreeNode p, TreeNode q) {
        if (root == null) {
            return new ResultType();
        }
        ResultType res = new ResultType();
        if (root == p || root == q) {
            res.pq = root;
            res.path.add("" + root.val);
            return res;
        }
        ResultType left = helper(root.left,p,q);
        ResultType right = helper(root.right,p,q);
        for (String item : left.path) {
                res.path.add(root.val + "->" + item);
            }
        for (String item : right.path) {
                res.path.add(root.val + "->" + item);
            }
        if (left.pq != null && right.pq != null) {
            res.path.clear();
            res.path.add("" + root.val);
            res.pq = root;
            return res;
        }
        if (left.pq != null) {
            res.pq = left.pq;
            return res;
        }
        if (right.pq != null) {
            res.pq = right.pq;
            return res;
        }
        return new ResultType();
    }
