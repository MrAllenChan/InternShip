// Traverse

public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<>();
        if (root == null) return result;
        TreeNode prev = null;
        TreeNode curt = null;
        Deque<TreeNode> stack = new ArrayDeque<>();
        stack.push(root);
        while (!stack.isEmpty()) {
            curt = stack.peek();
            if (prev == null || prev.left == curt || prev.right == curt) { // can traverse down
               if (curt.left != null) {
                   stack.push(curt.left);
               }
                else if (curt.right != null) {
                    stack.push(curt.right);
                }
            }
            else if (curt.left == prev) {  // bottom up from left side
                if (curt.right != null) stack.push(curt.right);
            }
            else {
                result.add(stack.pop().val); // bottom up from right side
            }
            prev = curt;
        }
        return result;
    }


//Iterator!!!!!

public class BSTIterator {
    Deque<TreeNode> stack;
    public BSTIterator(TreeNode root) {
        stack = new ArrayDeque<>();
        findNextLeaf(root);
    }

    /** @return whether we have a next smallest number */
    public boolean hasNext() {
        return !stack.isEmpty();
    }
    
    public void findNextLeaf(TreeNode node) {
        while (node != null) {
            stack.push(node);
            if (node.left != null) {
                node = node.left;
            }
            else {
                node = node.right;
            }
        }
    }

    /** @return the next smallest number */
    public int next() {
        TreeNode curt = stack.pop();
        if (!stack.isEmpty()) {
            if (stack.peek().left == curt) {
                findNextLeaf(stack.peek().right);
            } 
        }
        return curt.val;
    }
}
